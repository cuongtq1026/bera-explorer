generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Block {
  number           BigInt               @id @unique
  hash             String               @unique
  parentHash       String
  nonce            String?
  sha3Uncles       String
  logsBloom        String?
  transactionsRoot String
  stateRoot        String
  receiptsRoot     String
  miner            String
  difficulty       BigInt
  totalDifficulty  BigInt
  extraData        String?
  size             BigInt
  gasLimit         BigInt
  gasUsed          BigInt
  createdAt        BigInt
  transactions     Transaction[]
  transfer         Transfer[]
  log              Log[]
  receipts         TransactionReceipt[]
  contract         Contract[]
  swap             Swap[]
  erc20Price       Erc20Price[]

  @@map("block")
}

model Transaction {
  hash                 String                @id @unique
  nonce                BigInt
  blockHash            String?
  blockNumber          BigInt
  transactionIndex     Int?
  from                 String
  to                   String?
  input                String
  value                Decimal               @db.Decimal(78, 0)
  chainId              Int?
  gas                  BigInt
  gasPrice             BigInt?
  block                Block                 @relation(fields: [blockNumber], references: [number], onDelete: Cascade)
  receipt              TransactionReceipt?
  internalTransactions InternalTransaction[]
  transfers            Transfer[]
  contract             Contract[]
  swap                 Swap[]
  erc20Price           Erc20Price[]

  @@index([blockNumber])
  @@map("transaction")
}

model TransactionReceipt {
  transactionHash   String   @id @unique
  transactionIndex  Int
  blockHash         String
  blockNumber       BigInt
  from              String
  to                String?
  cumulativeGasUsed BigInt
  gasUsed           BigInt
  contractAddress   String?
  logsBloom         String
  status            Boolean
  effectiveGasPrice BigInt
  type              String
  root              String?
  createdAt         DateTime @default(now())
  logs              Log[]

  block       Block       @relation(fields: [blockNumber], references: [number], onDelete: Cascade)
  transaction Transaction @relation(fields: [transactionHash], references: [hash], onDelete: Cascade)

  @@index([blockNumber, transactionIndex])
  @@map("transaction_receipt")
}

model Log {
  logHash          String  @id
  address          String
  data             String
  blockNumber      BigInt
  transactionHash  String
  transactionIndex Int
  index            Int
  removed          Boolean

  transactionReceipt TransactionReceipt @relation(fields: [transactionHash], references: [transactionHash], onDelete: Cascade)
  topics             LogTopic[]
  block              Block              @relation(fields: [blockNumber], references: [number], onDelete: Cascade)
  transfer           Transfer?

  @@index([transactionHash, index])
  @@map("log")
}

model LogTopic {
  topicHash String @id
  topic     String
  index     Int
  logHash   String
  log       Log    @relation(fields: [logHash], references: [logHash], onDelete: Cascade)

  @@index([logHash])
  @@map("log_topic")
}

model InternalTransaction {
  hash            String  @id @unique
  parentHash      String?
  transactionHash String
  from            String
  to              String
  input           String
  type            String
  value           Decimal @db.Decimal(78, 0)
  gas             Decimal @db.Decimal(78, 0)
  gasUsed         Decimal @db.Decimal(78, 0)

  calls InternalTransaction[] @relation("InternalCalls")

  transaction Transaction          @relation(fields: [transactionHash], references: [hash], onDelete: Cascade)
  parent      InternalTransaction? @relation("InternalCalls", fields: [parentHash], references: [hash], onDelete: Cascade)

  @@map("internal_transaction")
}

model Transfer {
  hash             String   @id
  blockNumber      BigInt
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  from             String
  to               String
  tokenAddress     String
  amount           Decimal  @db.Decimal(78, 0)
  timestamp        DateTime

  transaction    Transaction      @relation(fields: [transactionHash], references: [hash], onDelete: Cascade)
  block          Block            @relation(fields: [blockNumber], references: [number], onDelete: Cascade)
  balance        Balance[]
  balanceHistory BalanceHistory[]
  log            Log              @relation(fields: [hash], references: [logHash], onDelete: Cascade)

  @@index([from])
  @@index([to])
  @@index([tokenAddress])
  @@index([timestamp])
  @@index([transactionHash])
  @@index([blockNumber, transactionIndex, logIndex])
  @@map("transfer")
}

model Balance {
  address       String
  tokenAddress  String
  amount        Decimal  @db.Decimal(78, 0)
  transferHash  String
  lastUpdatedAt DateTime @updatedAt

  transfer Transfer @relation(fields: [transferHash], references: [hash], onDelete: Cascade)

  @@unique([address, tokenAddress])
  @@index([address])
  @@index([tokenAddress])
  @@map("balance")
}

model BalanceHistory {
  hash             String   @id
  blockNumber      BigInt
  transactionIndex Int
  index            Int
  logIndex         Int
  transactionHash  String
  transferHash     String
  address          String
  tokenAddress     String
  amount           Decimal  @db.Decimal(78, 0)
  createdAt        DateTime

  transfer Transfer @relation(fields: [transferHash], references: [hash], onDelete: Cascade)

  @@unique([transactionHash, transferHash, address])
  @@index([address])
  @@index([address, tokenAddress])
  @@index([blockNumber, transactionIndex, logIndex]) //
  @@index([transferHash])
  @@index([createdAt])
  @@index([amount, createdAt])
  @@map("balance_history")
}

model Token {
  address     String  @id
  name        String
  symbol      String
  decimals    Int     @db.SmallInt
  totalSupply Decimal @db.Decimal(78, 0)

  @@map("token")
}

model Contract {
  address String  @id
  name    String?

  // Track deployment details
  deploymentTransaction     Transaction @relation(fields: [deploymentTransactionHash], references: [hash], onDelete: Cascade)
  deploymentTransactionHash String
  deploymentBlock           Block       @relation(fields: [deploymentBlockNumber], references: [number], onDelete: Cascade)
  deploymentBlockNumber     BigInt

  @@map("contract")
}

model Swap {
  id               BigInt   @id @default(autoincrement())
  blockNumber      BigInt
  transactionHash  String
  transactionIndex Int
  from             String
  to               String
  dex              String
  fromAmount       Decimal  @db.Decimal(78, 0)
  toAmount         Decimal  @db.Decimal(78, 0)
  createdAt        DateTime

  block       Block        @relation(fields: [blockNumber], references: [number], onDelete: Cascade)
  transaction Transaction  @relation(fields: [transactionHash], references: [hash], onDelete: Cascade)
  Erc20Price  Erc20Price[]

  @@index([dex])
  @@index([from])
  @@index([to])
  @@map("swap")
}

model Erc20Price {
  hash             String   @id
  tokenAddress     String
  blockNumber      BigInt
  transactionHash  String
  transactionIndex Int
  swapId           BigInt
  usdPrice         Decimal  @db.Decimal(78, 0)
  ethPrice         Decimal  @db.Decimal(78, 0)
  createdAt        DateTime
  usdPriceRefHash  String?
  ethPriceRefHash  String?

  swap        Swap        @relation(fields: [swapId], references: [id], onDelete: Cascade)
  block       Block       @relation(fields: [blockNumber], references: [number], onDelete: Cascade)
  transaction Transaction @relation(fields: [transactionHash], references: [hash], onDelete: Cascade)

  usdPriceRef Erc20Price?  @relation("Erc20PriceRef", fields: [usdPriceRefHash], references: [hash], onDelete: Cascade)
  usdRefList  Erc20Price[] @relation("Erc20PriceRef")

  ethPriceRef Erc20Price?  @relation("Erc20EthPriceRef", fields: [ethPriceRefHash], references: [hash], onDelete: Cascade)
  ethRefList  Erc20Price[] @relation("Erc20EthPriceRef")

  @@index([swapId])
  @@index([blockNumber, transactionIndex, hash])
  @@index([transactionHash])
  @@index([tokenAddress, createdAt])
  @@map("erc20_price")
}
