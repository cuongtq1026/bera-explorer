generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Block {
  number             BigInt               @id @unique
  hash               String               @unique
  parentHash         String
  nonce              String?
  sha3Uncles         String
  logsBloom          String?
  transactionsRoot   String
  stateRoot          String
  receiptsRoot       String
  miner              String
  difficulty         BigInt
  totalDifficulty    BigInt
  extraData          String?
  size               BigInt
  gasLimit           BigInt
  gasUsed            BigInt
  createdAt          BigInt
  transactions       Transaction[]
  Transfer           Transfer[]
  Log                Log[]
  TransactionReceipt TransactionReceipt[]

  @@map("block")
}

model Transaction {
  hash                String                @id @unique
  nonce               BigInt
  blockHash           String?
  blockNumber         BigInt
  transactionIndex    Int?
  from                String
  to                  String?
  input               String
  value               Decimal               @db.Decimal(78, 0)
  chainId             Int?
  gas                 BigInt
  gasPrice            BigInt?
  block               Block                 @relation(fields: [blockNumber], references: [number], onDelete: Cascade)
  receipt             TransactionReceipt?
  internalTransaction InternalTransaction[]
  Transfer            Transfer[]

  @@map("transaction")
}

model TransactionReceipt {
  transactionHash   String   @id @unique
  transactionIndex  Int
  blockHash         String
  blockNumber       BigInt
  from              String
  to                String?
  cumulativeGasUsed BigInt
  gasUsed           BigInt
  contractAddress   String?
  logsBloom         String
  status            Boolean
  effectiveGasPrice BigInt
  type              String
  root              String?
  createdAt         DateTime @default(now())
  logs              Log[]

  block       Block       @relation(fields: [blockNumber], references: [number])
  transaction Transaction @relation(fields: [transactionHash], references: [hash], onDelete: Cascade)

  @@index([blockNumber, transactionIndex])
  @@map("transaction_receipt")
}

model Log {
  logHash            String             @id
  address            String
  data               String
  blockNumber        BigInt
  transactionHash    String
  transactionIndex   Int
  index              Int
  removed            Boolean
  transactionReceipt TransactionReceipt @relation(fields: [transactionHash], references: [transactionHash], onDelete: Cascade)
  topics             LogTopic[]
  Block              Block              @relation(fields: [blockNumber], references: [number])

  @@map("log")
}

model LogTopic {
  topicHash String @id
  topic     String
  index     Int
  logHash   String
  log       Log    @relation(fields: [logHash], references: [logHash], onDelete: Cascade)

  @@map("log_topic")
}

model InternalTransaction {
  hash            String  @id @unique
  parentHash      String?
  transactionHash String
  from            String
  to              String
  input           String
  type            String
  value           Decimal @db.Decimal(78, 0)
  gas             Decimal @db.Decimal(78, 0)
  gasUsed         Decimal @db.Decimal(78, 0)

  calls InternalTransaction[] @relation("InternalCalls")

  transaction Transaction          @relation(fields: [transactionHash], references: [hash])
  parent      InternalTransaction? @relation("InternalCalls", fields: [parentHash], references: [hash])

  @@map("internal_transaction")
}

model Transfer {
  hash             String   @id
  blockNumber      BigInt
  transactionHash  String
  transactionIndex Int
  from             String
  to               String
  tokenAddress     String
  amount           Decimal  @db.Decimal(78, 0)
  logIndex         Int
  timestamp        DateTime

  transaction Transaction @relation(fields: [transactionHash], references: [hash])
  block       Block       @relation(fields: [blockNumber], references: [number])

  @@index([from, to])
  @@index([tokenAddress])
  @@index([timestamp])
  @@index([transactionHash])
  @@index([blockNumber, transactionIndex, logIndex])
  @@map("transfer")
}
